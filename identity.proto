syntax = "proto3";

option go_package = "identity_proto";

package api.themakers.identity;

////////////////////////////////////////////////////////////////
////
////
service Identity {
    //method for give identities and verifiers for server
    rpc ListIdentitiesAndVerifiers (VerifiersDetailsRequest) returns (VerifierDetailsResponse);
    //method for give identities and verifiers for user
    rpc ListMyIdentitiesAndVerifiers (MyVerifiersDetailRequest) returns (VerifierDetailsResponse);

    rpc CheckStatus (StatusReq) returns (Status);

    rpc CancelAuthentication (CancelAuthenticationReq) returns (Status);

    rpc InitializeStaticVerifier (InitializeStaticVerifierReq) returns (InitializeStaticVerifierResp);

    rpc StartAuthentication (StartAuthenticationReq) returns (StartAuthenticationResp);

    rpc StartVerification (StartVerificationReq) returns (StartVerificationResp);

    rpc Verify (VerifyReq) returns (VerifyResp);

    rpc Logout (LogoutReq) returns (Status);

    rpc UserMerge (UserMergeReq) returns (UserMergeResp);

}

message Dummy {}

////////////////////////////////////////////////////////////////
////
////

//// ListMessages
message VerifiersDetailsRequest {}

message VerifierDetailsResponse {
    repeated string IdentitiyNames = 1;
    repeated VerifierDetails Verifiers = 2;
}
message MyVerifiersDetailRequest {
    //    string Identity = 1;
    //    string VerifierName = 2;
}

message StartVerificationReq {
    string VerifierName = 1;
    string Identity = 2;
    map<string, string> VerificationData = 3;
}

message StartVerificationResp {
    string AuthenticationID = 1;
    //    string VerifierName = 1;
    //    string VerificationCode = 2;
    //    string Identity = 3;
    //    string IdentityName = 4;

}

message StatusReq {

}

message Status {
    bool Authenticated = 1;
    bool Authenticating = 2;
    int64 RemainingFactors = 3;
    string SessionID = 4;
}

message UserMergeReq {

}

message UserMergeResp {

}

message CancelAuthenticationReq {

}

message LogoutReq {
    bool AllSessions=1;
}

message InitializeStaticVerifierReq {
    string VerifierName = 1;
    map<string, string> InitializationData = 2;
    //map<string, bytes> InitalizationData = 2;
}
//////////////////////


message InitializeStaticVerifierResp{
    bytes InitializationResult = 1;

}
//// Authentication messages
message StartAuthenticationReq {
    string VerifierName = 1;
}

message VerifyReq {
    string VerifierName = 1;
    string AuthenticationID = 2;
    string VerificationCode = 3;
    string Identity = 4;
    //    string IdentityName = 4;
}

message StartAuthenticationResp {
    bool AuthenticationSessionExist = 1;
    //map<string, string> VerificationDirections=1;
}

message VerifyResp {
    bool VerifyStatus = 1;
}
////////////////////////////

///// Support types
message VerifierDetails {
    string Name = 1;
    string IdentityName = 2;

    bool SupportRegular = 3;
    bool SupportReverse = 4;
    bool SupportOAuth2 = 5;
    bool SupportStatic = 6;
}

message IdentityData {
    string name = 1;
    string identity = 2;
}

message UserDetails {
    string ID = 1;
    repeated IdentityData identities = 2;
}

////////////////////////////////////////////////////////////////
////
////
service IdentityPrivate {
    rpc LoginAs(LoginAsReq) returns (LoginAsResp);
}

message LoginAsReq {
    string User = 1;
}

message LoginAsResp {
    string Session = 1;
    string User = 2;
    string Error = 3;
}